generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Modelo para permisos
model Permission {
  id          String    @id @default(uuid())
  code        String    @unique
  name        String
  description String?   @db.Text
  category    String?   @db.VarChar(50) // NUEVO: Para agrupar permisos (admin, basic, pro, etc.)
  planLevel   String?   @db.VarChar(20) // NUEVO: Nivel mínimo de plan requerido
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  systemPermissions SystemPermission[]
  @@index([category]) // NUEVO índice
  @@index([planLevel]) // NUEVO índice
}
// Tabla de relación muchos a muchos entre sistemas y permisos

model SystemPermission {
  id                String           @id @default(uuid())
  systemId          String
  permissionId      String
  createdAt         DateTime         @default(now()) @map("created_at")

  authorizedSystem  AuthorizedSystem @relation(fields: [systemId], references: [id], onDelete: Cascade)
  permission        Permission       @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([systemId, permissionId])
}
// Modificación en AuthorizedSystem para usar la relación

model AuthorizedSystem {
  id             String    @id @default(uuid())
  name           String    @unique @db.VarChar(100)
  apiKeyHash     String    @unique
  description    String?   @db.Text
  allowedOrigins String[]
  organizationId String?   // NUEVA: Relación con organización
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relaciones existentes
  emailLogs         EmailLog[]
  systemPermissions SystemPermission[]
  
  // NUEVA: Relación con organización
  organization Organization? @relation(fields: [organizationId], references: [id])
  usageRecords UsageRecord[]

  @@index([name])
  @@index([isActive])
  @@index([organizationId]) // NUEVO índice
}
// Modelo para eventos de webhook
model WebhookEvent {
  id          String    @id @default(uuid())
  emailLogId  String
  eventType   String
  rawPayload  Json
  processedAt DateTime  @default(now())

  emailLog    EmailLog  @relation(fields: [emailLogId], references: [id])

  @@index([emailLogId])
  @@index([eventType])
  @@index([processedAt])
}
// Modificación en EmailLog para la relación con WebhookEvent

model EmailLog {
  id          String    @id @default(uuid())
  to          String    @db.VarChar(255)
  subject     String    @db.VarChar(255)
  body        String?   @db.Text
  status      EmailStatus @default(PENDING)
  systemId    String?
  templateId  String?
  organizationId String?      // NUEVO: Para tracking directo por organización
  billable       Boolean      @default(true) // NUEVO: Si cuenta para facturación
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  attachments Json?
  error       String?   @db.Text
  metadata    Json?
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?

  authorizedSystem AuthorizedSystem? @relation(fields: [systemId], references: [id])
  emailTemplate    EmailTemplate?  @relation(fields: [templateId], references: [id])
  webhookEvents    WebhookEvent[]

  @@index([to])
  @@index([systemId])
  @@index([templateId])
  @@index([status])
  @@index([createdAt])
  @@index([organizationId]) // NUEVO índice
  @@index([billable])        // NUEVO índice
}

model EmailTemplate {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(100)
  subject     String    @db.VarChar(255)
  contentHtml String    @db.Text
  contentText String?   @db.Text
  variables   String[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isActive    Boolean   @default(true)

  emailLogs EmailLog[]

  @@index([name])
  @@index([isActive])
}



// Modelo para usuarios individuales que se registran en el SaaS
model User {
  id            String    @id @default(uuid())
  email         String    @unique @db.VarChar(255)
  firstName     String    @db.VarChar(100)
  lastName      String    @db.VarChar(100)
  passwordHash  String
  emailVerified Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime?

  // Relaciones
  organizations     UserOrganization[]
  emailVerifications EmailVerification[]
  passwordResets    PasswordReset[]

  @@index([email])
  @@index([emailVerified])
  @@index([isActive])
}

// Modelo para organizaciones (una empresa puede tener múltiples sistemas)
model Organization {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(200)
  slug        String   @unique @db.VarChar(100) // Para URLs amigables
  description String?  @db.Text
  website     String?  @db.VarChar(255)
  industry    String?  @db.VarChar(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  users             UserOrganization[]
  authorizedSystems AuthorizedSystem[]
  subscriptions     Subscription[]
  usageRecords      UsageRecord[]

  @@index([slug])
  @@index([isActive])
}

// Tabla de relación muchos a muchos entre usuarios y organizaciones
model UserOrganization {
  id             String           @id @default(uuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

// Modelo para planes de suscripción
model Plan {
  id                String  @id @default(uuid())
  name              String  @unique @db.VarChar(100)
  slug              String  @unique @db.VarChar(50)
  description       String? @db.Text
  price             Decimal @db.Decimal(10, 2) // Precio mensual
  currency          String  @default("USD") @db.VarChar(3)
  emailsPerMonth    Int     // Límite de correos por mes
  templatesLimit    Int?    // Límite de plantillas (null = ilimitado)
  apiCallsPerMinute Int     @default(60) // Rate limiting
  features          Json    // Array de características del plan
  isActive          Boolean @default(true)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  subscriptions Subscription[]

  @@index([slug])
  @@index([isActive])
}

// Modelo para suscripciones de organizaciones a planes
model Subscription {
  id             String           @id @default(uuid())
  organizationId String
  planId         String
  status         SubscriptionStatus @default(ACTIVE)
  startDate      DateTime         @default(now())
  endDate        DateTime?        // null para suscripciones activas
  trialEndsAt    DateTime?        // Para períodos de prueba
  cancelledAt    DateTime?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan         Plan         @relation(fields: [planId], references: [id])

  @@index([organizationId])
  @@index([planId])
  @@index([status])
  @@index([startDate])
}

// Modelo para tracking de uso de correos
model UsageRecord {
  id             String    @id @default(uuid())
  organizationId String
  systemId       String?   // Opcional, para tracking por sistema específico
  period         DateTime  // Mes/año del período (ej: 2024-01-01 para enero 2024)
  emailsSent     Int       @default(0)
  emailsDelivered Int      @default(0)
  emailsFailed   Int       @default(0)
  apiCalls       Int       @default(0)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  authorizedSystem AuthorizedSystem? @relation(fields: [systemId], references: [id])

  @@unique([organizationId, systemId, period])
  @@index([organizationId])
  @@index([period])
}

// Modelo para verificación de email
model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
}

// Modelo para reset de contraseñas
model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
}

// Nuevos enums
enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELLED
  EXPIRED
}
enum EmailStatus {
  PENDING
  SCHEDULED
  QUEUED
  SENT
  FAILED
  DELIVERED
  BOUNCED
  COMPLAINT
  REJECTED
  OPENED
  CLICKED
  UNSUBSCRIBED
}